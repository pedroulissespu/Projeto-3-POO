/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projeto.poo;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class AluguelDeFilme extends javax.swing.JFrame {
    private boolean verificadorDaPesquisa = false;
    private boolean verificadorDivida = false;
    private boolean verificadorIdade = false;

    public AluguelDeFilme() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textoNome = new javax.swing.JLabel();
        inserirNome = new javax.swing.JTextField();
        textoCPF = new javax.swing.JLabel();
        inserirCPF = new javax.swing.JTextField();
        botaoPesquisar = new javax.swing.JButton();
        textoFilme = new javax.swing.JLabel();
        inserirFilme = new javax.swing.JTextField();
        botaoAlugar = new javax.swing.JButton();
        botaoSair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAluguel = new javax.swing.JTable();
        inserirFilme1 = new javax.swing.JTextField();
        textoFilme1 = new javax.swing.JLabel();
        inserirFilme2 = new javax.swing.JTextField();
        textoFilme2 = new javax.swing.JLabel();
        textoDia = new javax.swing.JLabel();
        inserirDia = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textoNome.setText("Nome :");

        textoCPF.setText("CPF :");

        botaoPesquisar.setText("Pesquisar");
        botaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarActionPerformed(evt);
            }
        });

        textoFilme.setText("Filme 1 :");

        botaoAlugar.setText("Alugar");
        botaoAlugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlugarActionPerformed(evt);
            }
        });

        botaoSair.setText("Sair");
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });

        tabelaAluguel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "Filme", "Pre√ßo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaAluguel);

        textoFilme1.setText("Filme 2 :");

        textoFilme2.setText("Filme 3 :");

        textoDia.setText("Data :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoCPF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inserirCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inserirNome, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoFilme)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inserirFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botaoPesquisar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoFilme1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inserirFilme1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textoFilme2)
                                    .addComponent(textoDia))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inserirDia)
                                    .addComponent(inserirFilme2, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoSair)
                            .addComponent(botaoAlugar))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoNome)
                    .addComponent(inserirNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoCPF)
                    .addComponent(inserirCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoPesquisar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoFilme)
                    .addComponent(inserirFilme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(botaoAlugar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoSair)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoFilme1)
                            .addComponent(inserirFilme1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoFilme2)
                            .addComponent(inserirFilme2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inserirDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoDia)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoAlugarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoAlugarActionPerformed
        String filmeAluguel = "";
        double precoFinal = 0;
        String nomeCliente = inserirNome.getText();
        String cpfCliente = inserirCPF.getText();
        String salvaDados = "";

        if (!verificadorDaPesquisa) {
            JOptionPane.showMessageDialog(rootPane, "Realize primeiro a pesquisa !");
        } else {
            if (verificadorDivida) {
                JOptionPane.showMessageDialog(rootPane, "Cliente possui dividas!");
            } else {
                File cliente = new File(Manipulacao.DB_CLIENTES + "clientes.txt");
                String nome = inserirNome.getText();
                String cpf = inserirCPF.getText();
                int idade = 0;
                String pesquisa = nome + "\t" + cpf + "\t";
                String[] lines = Manipulacao.lerArquivo(cliente).split("\n");

                for (String line : lines) {
                    String aux = line.split("\t")[0] + "\t" + line.split("\t")[1] + "\t";
                    if (aux.equals(pesquisa)) {
                        idade = Integer.parseInt(line.split("\t")[2]);
                        break;
                    }
                }

                File filme = new File(Manipulacao.DB_FILMES + "filmes.txt");
                String pesquisaFilme1 = inserirFilme.getText();
                String[] linesFilme1 = Manipulacao.lerArquivo(filme).split("\n");

                for (String line : linesFilme1) {
                    String aux = line.split("\t")[0];
                    if (aux.equals(pesquisaFilme1)) {
                        int idadeCompara = Integer.parseInt(line.split("\t")[3]);
                        if (idade < idadeCompara) {
                            verificadorIdade = true;
                        }
                        filmeAluguel += line.split("\t")[0] + ",";
                        precoFinal += Double.parseDouble(line.split("\t")[4].replace(",", "."));
                        break;
                    }
                }

                String pesquisaFilme2 = inserirFilme1.getText();
                String[] linesFilme2 = Manipulacao.lerArquivo(filme).split("\n");

                for (String line : linesFilme2) {
                    String aux = line.split("\t")[0];
                    if (aux.equals(pesquisaFilme2)) {
                        int idadeCompara = Integer.parseInt(line.split("\t")[3]);
                        if (idade < idadeCompara) {
                            verificadorIdade = true;
                        }
                        filmeAluguel += line.split("\t")[0] + ",";
                        precoFinal += Double.parseDouble(line.split("\t")[4].replace(",", "."));
                        break;
                    }
                }

                String pesquisaFilme3 = inserirFilme2.getText();
                String[] linesFilme3 = Manipulacao.lerArquivo(filme).split("\n");

                for (String line : linesFilme3) {
                    String aux = line.split("\t")[0];
                    if (aux.equals(pesquisaFilme3)) {
                        int idadeCompara = Integer.parseInt(line.split("\t")[3]);
                        if (idade < idadeCompara) {
                            verificadorIdade = true;
                        }
                        filmeAluguel += line.split("\t")[0];
                        precoFinal += Double.parseDouble(line.split("\t")[4].replace(",", "."));
                        break;
                    }
                }

                if (verificadorIdade) {
                    JOptionPane.showMessageDialog(rootPane, "Foi escolhido filmes onde n√£o possui a classifica√ß√£o");
                    verificadorIdade = false;
                } else {

                    salvaDados = nomeCliente + "\t" + cpfCliente + "\t" + filmeAluguel + "\t"
                            + String.valueOf(precoFinal).replace(".", ",") + "\t" + inserirDia.getText() + "\n";
                    File aluguel = new File(Manipulacao.DB_ALUGUEL + "aluguel.txt");
                    String filmes = "";

                    if (!inserirFilme.getText().equals("")) {
                        filmes += inserirFilme.getText() + "\n";
                    }

                    if (!inserirFilme1.getText().equals("")) {
                        filmes += inserirFilme1.getText() + "\n";
                    }

                    if (!inserirFilme2.getText().equals("")) {
                        filmes += inserirFilme2.getText() + "\n";
                    }

                    File historico = new File(
                            Manipulacao.DB_HISTORICO + inserirNome.getText() + inserirCPF.getText() + ".txt");
                    Manipulacao.escreverArquivo(historico, filmes);
                    Manipulacao.escreverArquivo(aluguel, salvaDados);

                    File ranking = new File(Manipulacao.DB_RANKING + "ranking.txt");
                    if (ranking.length() == 0) {
                        if (!inserirFilme.getText().equals("")) {
                            String filme1 = inserirFilme.getText();
                            Manipulacao.escreverArquivo(ranking, filme1 + "\t" + "1" + "\n");
                        }
                        if (!inserirFilme1.getText().equals("")) {
                            String filme2 = inserirFilme1.getText();
                            Manipulacao.escreverArquivo(ranking, filme2 + "\t" + "1" + "\n");
                        }
                        if (!inserirFilme2.getText().equals("")) {
                            String filme3 = inserirFilme2.getText();
                            Manipulacao.escreverArquivo(ranking, filme3 + "\t" + "1" + "\n");
                        }
                    } else {
                        String escreverArquivo = "";
                        int escolhas = 0;

                        if (!inserirFilme.getText().equals("")) {
                            String filme1 = inserirFilme.getText();
                            boolean verificaFilme1 = false;
                            String[] linesVerificaFilme1 = Manipulacao.lerArquivo(ranking).split("\n");

                            for (String line : linesVerificaFilme1) {
                                String aux = line.split("\t")[0];
                                if (aux.equals(filme1)) {
                                    String escolha = line.split("\t")[1];
                                    escolhas = Integer.parseInt(escolha);
                                    escolhas += 1;
                                    escreverArquivo += filme1 + "\t" + escolhas + "\n";
                                    verificaFilme1 = true;
                                    continue;
                                }
                                escreverArquivo += line.split("\t")[0] + "\t" + line.split("\t")[1] + "\n";
                            }
                            if (!verificaFilme1) {
                                escreverArquivo += filme1 + "\t" + "1" + "\n";
                            }
                        }

                        if (!inserirFilme1.getText().equals("")) {

                            String filme2 = inserirFilme1.getText();
                            boolean verificaFilme2 = false;
                            String[] linesVerificaFilme2 = escreverArquivo.split("\t");
                            if (escreverArquivo.equals("")) {
                                linesVerificaFilme2 = Manipulacao.lerArquivo(ranking).split("\n");
                            }

                            for (String line : linesVerificaFilme2) {
                                String aux = line.split("\t")[0];
                                if (aux.equals(filme2)) {
                                    escolhas = Integer.parseInt(line.split("\t")[1]);
                                    escolhas += 1;
                                    escreverArquivo += filme2 + "\t" + escolhas + "\n";
                                    verificaFilme2 = true;
                                    continue;
                                }
                                escreverArquivo += line.split("\t")[0] + "\t" + line.split("\t")[1] + "\n";
                            }
                            if (!verificaFilme2) {
                                escreverArquivo += filme2 + "\t" + "1" + "\n";
                            }
                        }

                        if (!inserirFilme2.getText().equals("")) {
                            String filme3 = inserirFilme2.getText();
                            boolean verificaFilme3 = false;
                            String[] linesVerificaFilme3 = escreverArquivo.split("\t");
                            if (escreverArquivo.equals("")) {
                                linesVerificaFilme3 = Manipulacao.lerArquivo(ranking).split("\n");
                            }

                            for (String line : linesVerificaFilme3) {
                                String aux = line.split("\t")[0];
                                if (aux.equals(filme3)) {
                                    escolhas = Integer.parseInt(line.split("\t")[1]);
                                    escolhas += 1;
                                    escreverArquivo += filme3 + "\t" + escolhas + "\n";
                                    verificaFilme3 = true;
                                    continue;
                                }
                                escreverArquivo += line.split("\t")[0] + "\t" + line.split("\t")[1] + "\n";
                            }
                            if (!verificaFilme3) {
                                escreverArquivo += filme3 + "\t" + "1" + "\n";
                            }
                        }

                        try {
                            FileWriter fw = new FileWriter(ranking);
                            BufferedWriter bw = new BufferedWriter(fw);
                            bw.write(escreverArquivo);
                            bw.close();
                            fw.close();
                        } catch (IOException e) {

                        }

                    }
                    JOptionPane.showMessageDialog(rootPane, "Aluguel realizado com sucesso");
                    dispose();
                }
            }
        }
    }// GEN-LAST:event_botaoAlugarActionPerformed

    private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoSairActionPerformed
        dispose();
    }// GEN-LAST:event_botaoSairActionPerformed

    private void botaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoPesquisarActionPerformed
        File aluguel = new File(Manipulacao.DB_ALUGUEL + "aluguel.txt");
        String nome = inserirNome.getText();
        String cpf = inserirCPF.getText();
        String pesquisa = nome + "\t" + cpf + "\t";
        String preencher = "";

        if (inserirNome.getText().equals("") || inserirCPF.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Preencha todos os campos para realizar a pesquisa!");
        }

        else {
            if (aluguel.length() == 0) {
                verificadorDaPesquisa = true;
            } else {
                String[] lines = Manipulacao.lerArquivo(aluguel).split("\n");

                for (String line : lines) {
                    String aux = line.split("\t")[0] + "\t" + line.split("\t")[1] + "\t";
                    if (aux.equals(pesquisa)) {
                        preencher = line.split("\t")[0] + "\t" + line.split("\t")[1] + "\t" + line.split("\t")[2] + "\t"
                                + line.split("\t")[3] + "\n";
                        verificadorDivida = true;
                        break;
                    }
                }

                DefaultTableModel modelo = (DefaultTableModel) tabelaAluguel.getModel();

                if (modelo.getRowCount() > 0) {
                    modelo.setRowCount(0);
                }

                Object[] obj = preencher.split("\t");
                modelo.addRow(obj);
                verificadorDaPesquisa = true;
            }
        }
    }// GEN-LAST:event_botaoPesquisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void alugueldefilme(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AluguelDeFilme.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AluguelDeFilme.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AluguelDeFilme.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AluguelDeFilme.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AluguelDeFilme().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlugar;
    private javax.swing.JButton botaoPesquisar;
    private javax.swing.JButton botaoSair;
    private javax.swing.JTextField inserirCPF;
    private javax.swing.JTextField inserirDia;
    private javax.swing.JTextField inserirFilme;
    private javax.swing.JTextField inserirFilme1;
    private javax.swing.JTextField inserirFilme2;
    private javax.swing.JTextField inserirNome;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaAluguel;
    private javax.swing.JLabel textoCPF;
    private javax.swing.JLabel textoDia;
    private javax.swing.JLabel textoFilme;
    private javax.swing.JLabel textoFilme1;
    private javax.swing.JLabel textoFilme2;
    private javax.swing.JLabel textoNome;
    // End of variables declaration//GEN-END:variables
}
